// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: banner.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannerSrvClient is the client API for BannerSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerSrvClient interface {
	//广告详情
	BannerInfo(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*BannerInfoResp, error)
}

type bannerSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerSrvClient(cc grpc.ClientConnInterface) BannerSrvClient {
	return &bannerSrvClient{cc}
}

func (c *bannerSrvClient) BannerInfo(ctx context.Context, in *BannerInfoReq, opts ...grpc.CallOption) (*BannerInfoResp, error) {
	out := new(BannerInfoResp)
	err := c.cc.Invoke(ctx, "/pb.bannerSrv/bannerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerSrvServer is the server API for BannerSrv service.
// All implementations must embed UnimplementedBannerSrvServer
// for forward compatibility
type BannerSrvServer interface {
	//广告详情
	BannerInfo(context.Context, *BannerInfoReq) (*BannerInfoResp, error)
	mustEmbedUnimplementedBannerSrvServer()
}

// UnimplementedBannerSrvServer must be embedded to have forward compatible implementations.
type UnimplementedBannerSrvServer struct {
}

func (UnimplementedBannerSrvServer) BannerInfo(context.Context, *BannerInfoReq) (*BannerInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BannerInfo not implemented")
}
func (UnimplementedBannerSrvServer) mustEmbedUnimplementedBannerSrvServer() {}

// UnsafeBannerSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerSrvServer will
// result in compilation errors.
type UnsafeBannerSrvServer interface {
	mustEmbedUnimplementedBannerSrvServer()
}

func RegisterBannerSrvServer(s grpc.ServiceRegistrar, srv BannerSrvServer) {
	s.RegisterService(&BannerSrv_ServiceDesc, srv)
}

func _BannerSrv_BannerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerSrvServer).BannerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bannerSrv/bannerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerSrvServer).BannerInfo(ctx, req.(*BannerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerSrv_ServiceDesc is the grpc.ServiceDesc for BannerSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.bannerSrv",
	HandlerType: (*BannerSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bannerInfo",
			Handler:    _BannerSrv_BannerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banner.proto",
}
