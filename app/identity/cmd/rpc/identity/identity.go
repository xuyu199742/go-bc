// Code generated by goctl. DO NOT EDIT!
// Source: identity.proto

//go:generate mockgen -destination ./identity_mock.go -package identity -source $GOFILE

package identity

import (
	"context"

	"go-bc/app/identity/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
)

type (
	GenerateTokenReq  = pb.GenerateTokenReq
	GenerateTokenResp = pb.GenerateTokenResp
	ClearTokenReq     = pb.ClearTokenReq
	ClearTokenResp    = pb.ClearTokenResp
	ValidateTokenReq  = pb.ValidateTokenReq
	ValidateTokenResp = pb.ValidateTokenResp

	Identity interface {
		// 生成token，只针对用户服务开放访问
		GenerateToken(ctx context.Context, in *GenerateTokenReq) (*GenerateTokenResp, error)
		// 清除token，只针对用户服务开放访问
		ClearToken(ctx context.Context, in *ClearTokenReq) (*ClearTokenResp, error)
		// validateToken ，只很对用户服务、授权服务api开放
		ValidateToken(ctx context.Context, in *ValidateTokenReq) (*ValidateTokenResp, error)
	}

	defaultIdentity struct {
		cli zrpc.Client
	}
)

func NewIdentity(cli zrpc.Client) Identity {
	return &defaultIdentity{
		cli: cli,
	}
}

// 生成token，只针对用户服务开放访问
func (m *defaultIdentity) GenerateToken(ctx context.Context, in *GenerateTokenReq) (*GenerateTokenResp, error) {
	client := pb.NewIdentityClient(m.cli.Conn())
	return client.GenerateToken(ctx, in)
}

// 清除token，只针对用户服务开放访问
func (m *defaultIdentity) ClearToken(ctx context.Context, in *ClearTokenReq) (*ClearTokenResp, error) {
	client := pb.NewIdentityClient(m.cli.Conn())
	return client.ClearToken(ctx, in)
}

// validateToken ，只很对用户服务、授权服务api开放
func (m *defaultIdentity) ValidateToken(ctx context.Context, in *ValidateTokenReq) (*ValidateTokenResp, error) {
	client := pb.NewIdentityClient(m.cli.Conn())
	return client.ValidateToken(ctx, in)
}
